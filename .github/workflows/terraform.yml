name: Deploy EC2 and DynamoDB with Terraform

on:
  workflow_dispatch: 

jobs:
  # Fase 1: Crear el bucket S3 y la tabla DynamoDB
  create-s3-and-dynamodb:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.3.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create S3 bucket if not exists
        run: |
          aws s3 ls s3://terraform-backup-diego || \
          aws s3 mb s3://terraform-backup-diego --region us-east-1

      - name: Create DynamoDB table if not exists
        run: |
          if ! aws dynamodb describe-table --table-name terraform-state-lock >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name terraform-state-lock \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --tags Key=Name,Value=TerraformStateLockTable
          fi

  # Fase 2: Ejecutar Terraform para el resto de la infraestructura
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: create-s3-and-dynamodb  # Este job depende del anterior

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.3.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

      - name: Plan Terraform (Crear EC2)
        run: terraform plan

      - name: Apply Terraform (Crear EC2)
        run: terraform apply -auto-approve

      - name: Output instance information
        run: |
          INSTANCE_ID=$(terraform output -raw instance_id)
          INSTANCE_PUBLIC_IP=$(terraform output -raw instance_public_ip)
          echo "Instance ID: $INSTANCE_ID"
          echo "Instance Public IP: $INSTANCE_PUBLIC_IP"

      - name: Use instance information
        run: |
          echo "Using Instance ID: $INSTANCE_ID"
          echo "Connecting to Instance with Public IP: $INSTANCE_PUBLIC_IP"
